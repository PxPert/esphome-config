substitutions:
  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  vibra_time_wake_word: 50ms
  vibra_time_ww_off: 200ms

  vibra_time_response: 50ms
  vibra_time_response_off: 100ms

  text_not_understood: "Mi dispiace, non ho capito"

# psram:
#   mode: octal
#   speed: 40MHz

#micro_wake_word:
#  model: okay_nabu
#  probability_cutoff: 0.4
#
#  on_wake_word_detected:
#    - voice_assistant.start:


button:
  - id: vibra_intent
    platform: output
    output: vibra_output
    duration: ${vibra_time_response}
    internal: true
  - id: vibra_ww
    platform: output
    output: vibra_output
    duration: ${vibra_time_wake_word}
    internal: true

  - platform: template
    name: Start assistant
    id: start_assistant
    entity_category: config
    on_press:
      - if:
          condition:
            - voice_assistant.is_running
          then:
            - voice_assistant.stop
            - wait_until:
                condition:
                  not:
                    - voice_assistant.is_running
                timeout: 1s
            - delay: 1s
            - lambda: id(va).set_use_wake_word(false);
            - globals.set:
                id: va_state
                value: 'false'
      - globals.set:
          id: va_capturing
          value: "true"
      - voice_assistant.start
      - light.turn_on:
          id: leds
          red: 0
          green: 0
          blue: 1
          brightness: 1
          effect: "Scan"
      - if:
          condition:
            - switch.is_on: use_wake_word
          then:
            - wait_until:
                condition:
                  not:
                    - voice_assistant.is_running
                timeout: 30s
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous

globals:
  - id: !extend ww_switch
    initial_value: use_wake_word
    restore_value: no
  - id: !extend start_assistant_button
    type: template_::TemplateButton*
    initial_value: start_assistant
    restore_value: no

  - id: va_capturing
    type: bool
    initial_value: 'false'
    restore_value: no

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: ALWAYS_OFF
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
#            - light.turn_on:
#                id: leds_wakeword
#                brightness: !lambda "return id(va_color)[3]/100.0;"
#                red: !lambda "return id(va_color)[0]/100.0;"
#                green: !lambda "return id(va_color)[1]/100.0;"
#                blue:  !lambda "return id(va_color)[2]/100.0;"
#     - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - globals.set:
          id: va_state
          value: 'false'
      - script.execute: refresh_led_default



#media_player:
#  - platform: i2s_audio
#    id: media_out
#    name: ${friendly_name} Player
#    dac_type: external
#    i2s_dout_pin: ${audio_sdata_pin}
#    i2s_audio_id: audio_i2s
#    i2s_comm_fmt: lsb
#    mode: stereo

i2s_audio:
  - id: audio_mic_i2s
    i2s_lrclk_pin: ${mic_lrclk_pin}
    i2s_bclk_pin: ${mic_bclk_pin}
  - id: audio_i2s
    i2s_lrclk_pin: ${audio_lrclk_pin}
    i2s_bclk_pin: ${audio_bclk_pin}

speaker:
  - id: audio_out
    platform: i2s_audio
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: stand_msb
    channel: mono

microphone:
  - platform: i2s_audio
    i2s_audio_id: audio_mic_i2s
    i2s_din_pin: ${mic_sdata_pin}
    adc_type: external
    id: mic_i2s
    pdm: false

esp_adf:


voice_assistant:
  id: va
  microphone: mic_i2s
  speaker: audio_out
#  media_player: media_out
  vad_threshold: 5
  use_wake_word: false
  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 15.0
  on_stt_vad_start:
    - globals.set:
        id: va_capturing
        value: "true"
    - light.turn_on:
        id: leds
        red: 0
        green: 1
        blue: 0
        brightness: 1
#        effect: "Scan"
  on_wake_word_detected:
    - script.execute: sound_beep
    - globals.set:
        id: va_capturing
        value: "true"
    - light.turn_on:
        id: leds
        red: 0
        green: 0
        blue: 1
        brightness: 1
#        effect: "Scan"

  on_stt_vad_end:
    - script.execute: sound_beep
    - delay: 160ms
    - script.execute: sound_beep
#  on_intent_start:
#    - button.press: vibra_intent
  on_tts_start:
    - globals.set:
        id: va_capturing
        value: "false"
    - if:
        condition:
          lambda: 'return x == "${text_not_understood}";'
        then:
          - light.turn_on:
              id: leds
              red: 1
              green: 0
              blue: 0
              brightness: 1
              effect: "None"
#              effect: "Scan"
        else:
          - light.turn_on:
              id: leds
              effect: "None"
#              effect: "Rainbow"
              red: 0
              green: 1
              blue: 0
              brightness: 1
  on_tts_stream_end:
    - delay: 1s
    - script.execute: refresh_led_full_off_default
#    - repeat:
#        count: 2
#        then:
#          - button.press: vibra_intent
#          - delay: ${vibra_time_response_off}
#    - delay: 2s
#    - light.turn_off:
#        id: leds
#        transition_length: ${transition_length}
#    - delay: ${transition_length}
#    - script.execute: refresh_led_default
  on_start:
    - if:
        condition:
          - lambda: "return id(va).is_continuous();"
        then:
          - globals.set:
              id: va_state
              value: 'true'
          - script.execute: refresh_led_default
  on_end:
    - if:
        condition:
          - lambda: "return id(va_capturing);"
        then:
          - globals.set:
              id: va_capturing
              value: "false"
          - globals.set:
              id: va_state
              value: 'false'
          - delay: 2s
          - script.execute: refresh_led_full_off_default
#    - if:
#        condition:
#          and:
#            - switch.is_on: use_wake_word
#            - not:
#              - voice_assistant.is_running
#        then:
#          - lambda: id(va).set_use_wake_word(true);
#          - voice_assistant.start_continuous:

  on_error:
    - script.execute: refresh_led_default
#    - light.turn_on:
#        id: leds
#        red: 1
#        green: 0
#        blue: 0
#    - delay: 2s
#    - light.turn_off: leds

  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
#          - script.execute: reset_led
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
#          - light.turn_off: leds

script:
  - id: sound_beep
    then:
      - if:
          condition:
            not:
              - speaker.is_playing
#                  id: external_speaker
          then:
            - speaker.play:
                id: audio_out
                data: [0x00,0x00,0xFF,0x05,0x00,0xFE,0x00,0x00,0xFC,0x03,0x01,0xFD,0x02,0x01,0xFD,0x00,0x02,0xF9,0x03,0x00,0xFD,0xFF,0x03,0xFA,0x01,0x03,0xFC,0x01,0x02,0xFD,0x01,0x06,0xFA,0x03,0x02,0xFF,0xFE,0x05,0xFB,0xFF,0x03,0xFC,0xFF,
                  0x01,0xFB,0xFB,0x05,0xFA,0x00,0x00,0x00,0xFB,0x07,0xFE,0xFF,0x03,0x00,0x00,0x05,0x01,0xFA,0x06,0xFD,0x00,0xFD,0x02,0xF6,0x04,0xFD,0xFD,0xFE,0xFF,0xF9,0x02,0x03,0xFA,0x04,0x00,0x03,0xFE,0x0A,0xF9,0x05,0x00,0x03,0xFE,0x05,
                  0xF9,0xFE,0x01,0xFB,0xFD,0xFB,0x00,0xF5,0x07,0xF9,0x02,0xFA,0x05,0xFA,0x0B,0xFF,0x01,0x02,0x07,0x01,0x01,0x07,0xF7,0x05,0xFC,0x03,0xF6,0x05,0xF0,0x03,0xFB,0xFF,0xF5,0x05,0xFB,0xFD,0x09,0xFC,0x02,0x00,0x0B,0xFA,0x11,0xF8,
                  0x06,0xFF,0x0C,0xF2,0x08,0xFA,0xF7,0x00,0xFF,0xF8,0xF8,0x04,0xEE,0x0A,0xFA,0x00,0xF7,0x14,0xF1,0x0E,0x05,0x00,0xFE,0x0F,0xFE,0xFF,0x0C,0xF1,0x03,0x01,0xFF,0xE9,0x12,0xE8,0xFF,0xFF,0x01,0xEC,0x0D,0xF9,0xFB,0x10,0xFD,0xFD,
                  0x0C,0x10,0xED,0x1D,0xF7,0xFF,0x00,0x11,0xE6,0x0F,0xF7,0xF1,0x02,0x03,0xE8,0xFD,0x0C,0xE2,0x10,0x01,0xFB,0xF7,0x1E,0xE9,0x15,0x09,0xFC,0xFE,0x1D,0xEF,0xFE,0x15,0xE7,0xFE,0x08,0xF9,0xE4,0x19,0xDE,0xFF,0x05,0xFC,0xE4,0x21,
                  0xF2,0xF8,0x1C,0xFD,0xF5,0x16,0x0D,0xE9,0x26,0xF3,0xF9,0x0A,0x0F,0xD4,0x1B,0xF4,0xE6,0x07,0x07,0xDD,0x07,0x0B,0xDD,0x18,0x04,0xF0,0x04,0x28,0xDB,0x1E,0x0F,0xF2,0xFF,0x24,0xE3,0x04,0x16,0xDE,0x00,0x10,0xE7,0xE6,0x25,0xD4,
                  0xFF,0x11,0xF6,0xE4,0x2C,0xE9,0xFC,0x23,0xF7,0xF3,0x29,0x00,0xE4,0x2F,0xED,0xEF,0x13,0x08,0xD0,0x24,0xEC,0xE3,0x10,0x01,0xD2,0x1A,0x08,0xD8,0x22,0x09,0xE7,0x10,0x24,0xD6,0x27,0x0D,0xE9,0x0B,0x24,0xD1,0x0D,0x15,0xD4,0x01,
                  0x17,0xDB,0xF1,0x23,0xCE,0x05,0x17,0xE8,0xF0,0x37,0xDF,0x01,0x2B,0xF0,0xF2,0x30,0xF3,0xEB,0x31,0xE5,0xEE,0x1E,0xF4,0xD0,0x2B,0xE5,0xDF,0x1B,0xFD,0xD2,0x25,0xFE,0xDB,0x2A,0x04,0xE3,0x24,0x19,0xD4,0x2C,0x0C,0xDE,0x13,0x1B,
                  0xCD,0x16,0x0E,0xCF,0x0A,0x11,0xCD,0x02,0x1F,0xCD,0x0B,0x1E,0xE0,0xFD,0x31,0xDB,0x0A,0x2B,0xE7,0xFE,0x32,0xE2,0xF3,0x2D,0xDF,0xEC,0x24,0xE7,0xDD,0x29,0xDF,0xE4,0x22,0xEE,0xDD,0x2E,0xF6,0xE3,0x2E,0x01,0xE2,0x2B,0x09,0xDD,
                  0x2D,0x04,0xDD,0x20,0x08,0xCE,0x1A,0x06,0xCF,0x10,0x0E,0xCE,0x0F,0x13,0xD2,0x12,0x19,0xDA,0x12,0x26,0xDD,0x0F,0x27,0xE0,0x04,0x28,0xDD,0xFF,0x24,0xDB,0xF5,0x20,0xD8,0xEE,0x21,0xE0,0xEB,0x26,0xE8,0xEB,0x29,0xEF,0xED,0x2C,
                  0xF7,0xEE,0x2F,0xF9,0xE8,0x25,0xFE,0xDD,0x22,0xFB,0xDC,0x19,0xFE,0xD5,0x16,0xFE,0xD7,0x18,0x09,0xDD,0x15,0x16,0xDD,0x1A,0x15,0xE4,0x12,0x1D,0xE0,0x12,0x16,0xDE,0x05,0x16,0xDD,0xFB,0x19,0xDA,0xFD,0x15,0xE3,0xF4,0x1F,0xE2,
                  0x00,0x1F,0xF1,0xF8,0x25,0xF3,0xF5,0x24,0xF1,0xF5,0x1D,0xF8,0xE8,0x1E,0xEC,0xEB,0x12,0xFA,0xE1,0x17,0xF9,0xE6,0x17,0xFF,0xE9,0x14,0x0A,0xE8,0x1E,0x05,0xF0,0x0F,0x12,0xE4,0x12,0x08,0xE8,0x09,0x0B,0xE5,0x02,0x0B,0xE0,0x07,
                  0x08,0xEF,0xF8,0x19,0xE9,0x02,0x12,0xF5,0xF9,0x19,0xFA,0xF9,0x1B,0xF6,0xFA,0x0D,0x04,0xEA,0x14,0xFA,0xF1,0x08,0x03,0xEA,0x06,0x03,0xE8,0x09,0x03,0xF4,0xFD,0x11,0xED,0x08,0x0B,0xF8,0xFE,0x12,0xF9,0xFF,0x12,0xF6,0xFF,0x09,
                  0x00,0xF1,0x0F,0xF6,0xF8,0x05,0x00,0xF1,0x06,0xFE,0xF1,0x08,0xFF,0xF9,0x00,0x0A,0xF3,0x09,0x04,0xFB,0x01,0x0B,0xFA,0x03,0x09,0xF7,0x01,0x04,0xFD,0xF8,0x09,0xF6,0xFD,0x03,0xFD,0xF8,0x04,0xFB,0xFA,0x07,0xFD,0xFD,0x02,0x04,
                  0xF9,0x08,0x00,0xFE,0x02,0x04,0xFC,0x04,0x02,0xFA,0x02,0x00,0xFC,0xFE,0x03,0xF9,0x00,0x01,0xFD,0xFD,0x03,0xFB,0x00,0x03,0xFE,0xFF,0x03,0x01,0xFC,0x06,0xFD,0x01,0x00,0x00,0xFE,0x00,0x00,0xFB,0x03,0xFD,0x00,0xFF,0x00,0x00]
            - wait_until:
                not:
                  speaker.is_playing


  - id: sound_key_click
    then:
      - if:
          condition:
            not:
              - speaker.is_playing
#                  id: external_speaker
          then:
            - speaker.play:
                id: audio_out
                data: [0x01,0x02,0x04,0x06,0x07,0x08,0x08,0x06,0x01,0xFA,0xF4,0xEF,0xEE,0xF1,0xF7,0xFF,0x07,0x0E,0x11,0x11,0x10,0x0C,0x06,0xFF,0xF8,0xF1,0xEC,0xEA,0xEC,0xF2,0xF9,0xFF,0x05,0x0A,0x10,0x14,0x17,0x17,0x14,0x0B,0xFD,0xED,
                  0xE0,0xD9,0xDB,0xE6,0xF7,0x0A,0x19,0x20,0x1E,0x14,0x05,0xF4,0xE5,0xDF,0xE4,0xF4,0x0C,0x24,0x36,0x3D,0x35,0x20,0xFF,0xDD,0xC0,0xAE,0xA9,0xB0,0xC4,0xE0,0x03,0x26,0x48,0x62,0x70,0x6D,0x59,0x35,0x08,0xD8,0xAC,0x8D,0x80,
                  0x85,0x9C,0xC1,0xF0,0x21,0x4E,0x6F,0x7F,0x7A,0x63,0x3D,0x0F,0xE0,0xB7,0x9B,0x90,0x96,0xAC,0xCE,0xF6,0x1D,0x3C,0x50,0x55,0x4D,0x3A,0x20,0x04,0xEC,0xD8,0xCC,0xC9,0xCD,0xD8,0xE8,0xF9,0x0A,0x17,0x1F,0x20,0x1C,0x12,0x07,
                  0xFC,0xF2,0xEC,0xEB,0xED,0xF3,0xFA,0x02,0x0A,0x10,0x12,0x12,0x0E,0x07,0xFE,0xF5,0xED,0xEA,0xEB,0xEF,0xF7,0x00,0x0A,0x10,0x13,0x12,0x0F,0x09,0x02,0xFB,0xF5,0xF3,0xF2,0xF3,0xF6,0xFB,0xFF,0x03,0x05,0x07,0x08,0x07,0x05,
                  0x03,0x01,0xFF,0xFE,0xFC,0xFB,0xFB,0xFC,0xFC,0xFD,0xFE,0xFF,0x00,0x01,0x02,0x02,0x01]
            - wait_until:
                not:
                  - speaker.is_playing
#                      id: external_speaker

